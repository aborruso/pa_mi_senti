---
import BaseLayout from "../../../../layouts/BaseLayout.astro";
import Breadcrumbs from "../../../../components/Breadcrumbs.astro";
import { getMunicipalities } from "../../../../lib/data";
import { buildCityPath, buildTemplatePath, buildHomePath } from "../../../../lib/paths";
import type { ContextEntry, Municipality } from "../../../../lib/types";

export function getStaticPaths() {
  return getMunicipalities().flatMap((municipality) =>
    municipality.contexts.map((context) => ({
      params: { istat: municipality.istat, context: context.slug },
      props: { municipality, context }
    }))
  );
}

const { municipality, context } = Astro.props as {
  municipality: Municipality;
  context: ContextEntry;
};

const channelTypeLabels: Record<string, string> = {
  email: "Email",
  phone: "Telefono",
  form: "Modulo",
  social: "Social"
};
---

<BaseLayout title={`PA Mi Senti · ${context.name} · ${municipality.name}`}>
  <Breadcrumbs
    items={[
      { label: "Città", href: buildHomePath() },
      { label: municipality.name, href: buildCityPath(municipality.istat) },
      { label: context.name }
    ]}
  />

  <section class="grid gap-6 lg:grid-cols-[2fr,1fr]">
    <article class={`rounded-2xl border border-slate-200 p-6 shadow-sm ${context.color || 'bg-white'}`}>
      <header class="mb-6">
        <p class="text-xs uppercase tracking-wide text-brand">Tema</p>
        <h2 class="flex items-center gap-2 text-2xl font-semibold text-slate-900">
          {context.emoji && <span class="text-3xl" aria-hidden="true">{context.emoji}</span>}
          <span>{context.name}</span>
        </h2>
        <p class="mt-2 text-sm text-slate-600">{context.description}</p>
      </header>
      <ul class="space-y-4">
        {context.channels.map((channel) => (
          <li class="rounded-xl border border-slate-200 p-4">
            <div class="flex flex-wrap items-baseline justify-between gap-2">
              <span class="inline-flex items-center rounded-full bg-brand/10 px-3 py-1 text-xs font-semibold uppercase text-brand-dark">
                {channelTypeLabels[channel.type] || channel.type}
              </span>
              <span class="text-sm font-medium text-slate-900">{channel.label}</span>
            </div>
            <p class="mt-2 break-all text-sm text-brand-dark">
              {channel.type === "email" ? (
                <a class="hover:underline" href={`mailto:${channel.value}`}>
                  {channel.value}
                </a>
              ) : channel.type === "phone" ? (
                <a class="hover:underline" href={`tel:${channel.value.replace(/\s+/g, "")}`}>
                  {channel.value}
                </a>
              ) : (
                <a class="hover:underline" href={channel.value} target="_blank" rel="noreferrer">
                  {channel.value}
                </a>
              )}
            </p>
            {channel.notes ? (
              <p class="mt-2 text-xs text-slate-500">Nota: {channel.notes}</p>
            ) : null}

            {channel.type === "social" && channel.platform === "twitter" && channel.key ? (
              <a
                class="mt-4 inline-flex items-center gap-2 rounded-lg bg-brand px-4 py-2 text-xs font-semibold text-white transition hover:bg-brand-dark"
                href={buildTemplatePath(municipality.istat, context.slug, channel.key)}
              >
                Scrivigli su Twitter
                <span aria-hidden="true">↗</span>
              </a>
            ) : null}
          </li>
        ))}
      </ul>
    </article>
    <aside class="space-y-4 rounded-2xl border border-slate-200 bg-white p-6 shadow-sm">
      <div>
        <p class="text-xs uppercase tracking-wide text-slate-500">Comune</p>
        <p class="text-lg font-semibold text-slate-900">{municipality.name}</p>
        <p class="text-xs text-slate-500">ISTAT {municipality.istat}</p>
      </div>
      {context.helpfulLinks?.length ? (
        <div>
          <p class="text-xs uppercase tracking-wide text-slate-500">Link utili</p>
          <ul class="mt-2 space-y-2 text-sm text-brand-dark">
            {context.helpfulLinks.map((link) => (
              <li>
                <a class="hover:underline" href={link.url} target="_blank" rel="noreferrer">
                  {link.label}
                </a>
              </li>
            ))}
          </ul>
        </div>
      ) : null}
    </aside>
  </section>
</BaseLayout>

